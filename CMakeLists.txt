cmake_minimum_required(VERSION 2.6)
project(TimeSync)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=gnu++11")
add_subdirectory(FitGen)
add_subdirectory(j-pet-framework)
message(${Framework_INCLUDE_DIRS})
include_directories(${Framework_INCLUDE_DIRS})
include_directories(j-pet-framework)
add_definitions(${Framework_DEFINITIONS})
include_directories(${FITGEN_INC})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${ROOT_INCLUDE_DIR})
file(GLOB IO IO/*.cpp)
add_library(timesyncio ${IO})
file(GLOB PRESELECT Preselection/*.cpp)
add_library(preselectionlib STATIC ${PRESELECT})
target_link_libraries(preselectionlib JPetFramework timesyncio)
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/config-files/large_barrel.json DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/config-files/conf_trb3.xml DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/analyse-prepare.sh DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/analyse-sync.sh DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(GLOB CALC Calc/*.cpp)
add_library(timesynccalc ${CALC})
#preparation
add_executable(Prepare-preselect Prepare-preselect.cpp)
target_link_libraries(Prepare-preselect preselectionlib JPetFramework)
#First stage of analysis
add_executable(SyncAB-preselect SyncAB-preselect.cpp)
target_link_libraries(SyncAB-preselect preselectionlib JPetFramework)
add_executable(SyncAB-fits SyncAB-fits.cpp)
target_link_libraries(SyncAB-fits timesynccalc timesyncio FitGen gpwrap JPetFramework)
#Second stage of analysis
add_executable(SyncStrips-preselect SyncStrips-preselect.cpp)
target_link_libraries(SyncStrips-preselect preselectionlib JPetFramework)
add_executable(SyncStrips-oposite SyncStrips-oposite.cpp)
target_link_libraries(SyncStrips-oposite timesynccalc timesyncio FitGen gpwrap JPetFramework)
add_executable(SyncStrips-neighbour SyncStrips-neighbour.cpp)
target_link_libraries(SyncStrips-neighbour timesynccalc timesyncio FitGen gpwrap JPetFramework)
#Third stage of analysis
add_executable(Synchro-solve-equations Synchro-solve-equations.cpp)
target_link_libraries(Synchro-solve-equations timesynccalc timesyncio FitGen gpwrap JPetFramework)
